{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","jsonInput","setJsonInput","useState","response","setResponse","selectedOptions","setSelectedOptions","React","createElement","rows","cols","value","onChange","e","target","placeholder","onClick","async","parsedInput","JSON","parse","res","axios","post","data","error","console","alert","Select","isMulti","options","label","map","option","length","key","Array","isArray","join","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sNA8EeA,MA1EHA,KACV,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAUC,GAAeF,mBAAS,OAClCG,EAAiBC,GAAsBJ,mBAAS,IA0CvD,OACEK,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,YACEC,KAAK,IACLC,KAAK,KACLC,MAAOX,EACPY,SAAWC,GAAMZ,EAAaY,EAAEC,OAAOH,OACvCI,YAAY,gDAEdR,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQQ,QAnDSC,UACnB,IACE,MAAMC,EAAcC,KAAKC,MAAMpB,GACzBqB,QAAYC,IAAMC,KAAK,sDAAuDL,GACpFd,EAAYiB,EAAIG,MAChB,MAAOC,GACPC,QAAQD,MAAM,SAAUA,GACxBE,MAAM,sCA4CyB,UAE9BxB,GACCI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,0BACJD,IAAAC,cAACoB,IAAM,CACLC,SAAO,EACPC,QA/CM,CACd,CAAEnB,MAAO,YAAaoB,MAAO,aAC7B,CAAEpB,MAAO,UAAWoB,MAAO,WAC3B,CAAEpB,MAAO,kBAAmBoB,MAAO,qBA6C3BnB,SAAUN,KAzCbH,EAGHI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UACGH,EAAgB2B,IAAIC,IACnB,MAAMtB,EAAQR,EAAS8B,EAAOtB,OAC9B,OAAIA,GAASA,EAAMuB,OAAS,EAExB3B,IAAAC,cAAA,MAAI2B,IAAKF,EAAOtB,OACdJ,IAAAC,cAAA,cAASyB,EAAOF,MAAM,KAAU,IAAEK,MAAMC,QAAQ1B,GAASA,EAAM2B,KAAK,MAAQ3B,GAI3E,SAfO,OCfX4B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA7B,EAAA,GAAA8B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,IAAAC,cAACD,IAAMiD,WAAU,KACfjD,IAAAC,cAACT,EAAG,QAORwC","file":"static/js/main.72824fef.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\n\nconst App = () => {\n  const [jsonInput, setJsonInput] = useState('');\n  const [response, setResponse] = useState(null);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  const handleSubmit = async () => {\n    try {\n      const parsedInput = JSON.parse(jsonInput);\n      const res = await axios.post('https://bajajfinserv-production.up.railway.app/bfhl', parsedInput);\n      setResponse(res.data);\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Invalid JSON input or API error');\n    }\n  };\n\n  const options = [\n    { value: 'alphabets', label: 'Alphabets' },\n    { value: 'numbers', label: 'Numbers' },\n    { value: 'highestAlphabet', label: 'Highest Alphabet' }\n  ];\n\n  const renderResponse = () => {\n    if (!response) return null;\n  \n    return (\n      <div>\n        <h3>Response:</h3>\n        <ul>\n          {selectedOptions.map(option => {\n            const value = response[option.value];\n            if (value && value.length > 0) {\n              return (\n                <li key={option.value}>\n                  <strong>{option.label}:</strong> {Array.isArray(value) ? value.join(', ') : value}\n                </li>\n              );\n            }\n            return null;\n          })}\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>BFHL Frontend</h1>\n      <textarea\n        rows=\"6\"\n        cols=\"50\"\n        value={jsonInput}\n        onChange={(e) => setJsonInput(e.target.value)}\n        placeholder='Enter JSON like { \"data\": [\"A\", \"B\", \"C\"] }'\n      ></textarea>\n      <br />\n      <button onClick={handleSubmit}>Submit</button>\n\n      {response && (\n        <div>\n          <h3>Select Data to Display</h3>\n          <Select\n            isMulti\n            options={options}\n            onChange={setSelectedOptions}\n          />\n        </div>\n      )}\n\n      {renderResponse()}\n    </div>\n  );\n};\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}